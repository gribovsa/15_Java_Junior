
/*todo
        Stream API «поток» — это просто набор данных, а интерфейс
    позволяет нам обрабатывать эти данные с помощью нужных нам функций. Функции
    передаются в виде лямбда-выражений в качестве параметров, а обработка
    выполняется последовательно. В Stream API такая последовательность называется
    «конвейером».
    Конвейеры состоят из методов интерфейса, а сами методы делятся на три типа:
    генераторы, фильтры и коллекционеры.
 */

import java.util.Arrays;
import java.util.List;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Example01 {
    public static void main(String[] args) {
        //Первая строка довольно проста и просто создает список строк myList с
        //использованием метода asList класса-помощника Arrays.
        List<String>myList = Arrays.asList("Привет", "мир", "Я", "родился", "!");

        /*
        В Java 8 списки и множества получили новый метод stream().
        Метод filter() является фильтром!
        Как я говорил ранее, в качестве параметра конвейерному методу я передал лямбда-выражение.
        filter(Predicate<?super String> predicate) - сам метод ожидает лямбда-выражение в качестве параметра!
        */
        myList.stream().filter(s -> s.length()>4).forEach(System.out::println);

        /*
        В этом примере я
        создал поток из списка, но можно создавать потоки и другими методами.
        Пример:
         */
        Arrays.asList(1,2,3).stream();
        Stream.of(3,2,1);
        /*
        Вы можете создавать потоки с помощью Stream.of, что иногда может быть более
        удобным.
         */

        /*
        Stream API также позволяет создавать
        специализированные потоки для работы с примитивными типами: IntStream,
        LongStream и DoubleStream. Поток IntStream можно использовать подобно
        обычному циклу for(;;), используя метод range.
         */

        IntStream.range(1, 4);

        /*
        У таких, вспомогательных, потоков есть пару дополнительных методов таких как
        sum() и average().
         */
        IntStream.range(1, 4).average().ifPresent(System.out::println);
        //Выводит в консоли среднее значение чисел от 1 до 3.


    }
}
